generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["audit", "public"]
}

model User {
  id                String                 @id @default(cuid())
  email             String                 @unique
  passwordHash      String
  firstName         String
  lastName          String
  phoneNumber       String?
  dateOfBirth       DateTime?
  role              Role                   @default(USER)
  emailVerified     Boolean                @default(false)
  phoneVerified     Boolean                @default(false)
  twoFactorEnabled  Boolean                @default(false)
  twoFactorMethod   TwoFactorMethod?
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  deletedAt         DateTime?
  searchVector      String?
  addresses         Address[]
  cart              Cart?
  membership        Membership?
  receivedMessages  Message[]              @relation("ReceivedMessages")
  sentMessages      Message[]              @relation("SentMessages")
  notifications     Notification[]
  orders            Order[]
  reviews           Review[]
  seller            Seller?
  sessions          Session[]
  supportTickets    SupportTicket[]
  consent           UserConsent?
  searchPreferences UserSearchPreference[]
  wallet            Wallet?
  wishlist          Wishlist[]
  abandonedCheckouts AbandonedCheckout[]
  affiliate         Affiliate?
  customerGroupMembers CustomerGroupMember[]
  conversations     Conversation[]
  loyaltyPoints   LoyaltyPoints?

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("users")
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  ipAddress    String
  userAgent    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
  @@schema("public")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  label     String?
  street    String
  apartment String?
  city      String
  state     String
  zipCode   String
  country   String
  latitude  Float?
  longitude Float?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
  @@index([isDefault])
  @@map("addresses")
  @@schema("public")
}

model Seller {
  id              String                  @id @default(cuid())
  userId          String                  @unique
  businessName    String
  businessEmail   String
  businessPhone   String
  taxId           String?
  status          SellerStatus            @default(PENDING)
  commissionRate  Float                   @default(0.15)
  rating          Float                   @default(0)
  totalSales      Int                     @default(0)
  totalRevenue    Decimal                 @default(0) @db.Decimal(10, 2)
  joinedAt        DateTime                @default(now())
  approvedAt      DateTime?
  suspendedAt     DateTime?
  payouts         Payout[]
  pickupLocations PickupLocation[]
  products        Product[]
  analytics       SellerAnalytics[]
  badges          SellerBadgeAssignment[]
  documents       SellerDocument[]
  seller_offers   seller_offers[]
  orders          SellerOrder[]
  reviews         SellerReview[]
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock_locations stock_locations[]

  @@index([status])
  @@index([rating])
  @@index([userId])
  @@map("sellers")
  @@schema("public")
}

model SellerDocument {
  id          String    @id @default(cuid())
  sellerId    String
  type        String
  fileName    String
  fileUrl     String
  status      String    @default("pending")
  uploadedAt  DateTime  @default(now())
  reviewedAt  DateTime?
  reviewNotes String?
  seller      Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([status])
  @@map("seller_documents")
  @@schema("public")
}

model PickupLocation {
  id                 String  @id @default(cuid())
  sellerId           String
  name               String
  address            String
  city               String
  state              String
  zipCode            String
  country            String
  latitude           Float?
  longitude          Float?
  phone              String
  email              String?
  isActive           Boolean @default(true)
  mondaySlots        Json?
  tuesdaySlots       Json?
  wednesdaySlots     Json?
  thursdaySlots      Json?
  fridaySlots        Json?
  saturdaySlots      Json?
  sundaySlots        Json?
  maxCapacityPerSlot Int     @default(10)
  pickupOrders       Order[]
  seller             Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([isActive])
  @@map("pickup_locations")
  @@schema("public")
}

model Category {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  type            CategoryType     @default(PRODUCT)
  parentId        String?
  imageUrl        String?
  isActive        Boolean          @default(true)
  sortOrder       Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  buy_box_configs buy_box_configs?
  parent          Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]       @relation("CategoryHierarchy")
  products        Product[]

  @@index([slug])
  @@index([parentId])
  @@index([isActive])
  @@map("categories")
  @@schema("public")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  websiteUrl  String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([slug])
  @@index([isActive])
  @@map("brands")
  @@schema("public")
}

model Product {
  id                     String                   @id @default(cuid())
  sellerId               String
  sku                    String                   @unique
  name                   String
  slug                   String                   @unique
  description            String
  shortDescription       String?
  categoryId             String
  brandId                String?
  status                 ProductStatus            @default(DRAFT)
  price                  Decimal                  @db.Decimal(10, 2)
  compareAtPrice         Decimal?                 @db.Decimal(10, 2)
  currency               Currency                 @default(USD)
  taxable                Boolean                  @default(true)
  trackInventory         Boolean                  @default(true)
  quantity               Int                      @default(0)
  lowStockAlert          Int                      @default(10)
  weight                 Float?
  length                 Float?
  width                  Float?
  height                 Float?
  requiresShipping       Boolean                  @default(true)
  shippingClassId        String?
  metaTitle              String?
  metaDescription        String?
  metaKeywords           String[]
  viewCount              Int                      @default(0)
  salesCount             Int                      @default(0)
  rating                 Float                    @default(0)
  searchScore            Float                    @default(0)
  searchKeywords         String[]
  searchPopularity       Int                      @default(0)
  typesenseId            String?                  @unique
  lastSyncedAt           DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  publishedAt            DateTime?
  type                   ProductType              @default(STANDARD)
  cartItems              CartItem[]
  customsItems           CustomsItem[]
  duplicate_groups       duplicate_groups?
  duplicate_products     duplicate_products?
  inventory_items        inventory_items[]
  inventory_movements    inventory_movements[]
  inventory_reservations inventory_reservations[]
  low_stock_alerts       low_stock_alerts[]
  orderItems             OrderItem[]
  attributes             ProductAttribute[]
  images                 ProductImage[]
  tags                   ProductTag[]
  variants               ProductVariant[]
  brand                  Brand?                   @relation(fields: [brandId], references: [id])
  category               Category                 @relation(fields: [categoryId], references: [id])
  seller                 Seller                   @relation(fields: [sellerId], references: [id])
  reviews                Review[]
  seller_offers          seller_offers[]
  searchPreferences      UserSearchPreference[]
  wishlistItems          Wishlist[]
  analytics              ProductAnalytics[]
  collectionProducts     CollectionProduct[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([slug])
  @@index([createdAt])
  @@index([sku])
  @@index([searchScore])
  @@index([typesenseId])
  @@index([type])
  @@map("products")
  @@schema("public")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isPrimary])
  @@map("product_images")
  @@schema("public")
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  sku        String      @unique
  name       String
  price      Decimal     @db.Decimal(10, 2)
  quantity   Int         @default(0)
  attributes Json
  imageUrl   String?
  position   Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
  @@schema("public")
}

model ProductAttribute {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
  @@index([productId])
  @@map("product_attributes")
  @@schema("public")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tag       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, tag])
  @@index([productId])
  @@index([tag])
  @@map("product_tags")
  @@schema("public")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("carts")
  @@schema("public")
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
  @@schema("public")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
  @@schema("public")
}

model Order {
  id                     String                   @id @default(cuid())
  orderNumber            String                   @unique
  userId                 String
  status                 OrderStatus              @default(PENDING)
  paymentStatus          PaymentStatus            @default(PENDING)
  subtotal               Decimal                  @db.Decimal(10, 2)
  taxAmount              Decimal                  @db.Decimal(10, 2)
  shippingAmount         Decimal                  @db.Decimal(10, 2)
  discountAmount         Decimal                  @db.Decimal(10, 2)
  totalAmount            Decimal                  @db.Decimal(10, 2)
  currency               Currency                 @default(USD)
  shippingMethod         ShippingMethod
  shippingAddressId      String?
  pickupLocationId       String?
  pickupSlot             DateTime?
  fraudScore             Float                    @default(0)
  fraudFlags             String[]
  isFlagged              Boolean                  @default(false)
  ipAddress              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  confirmedAt            DateTime?
  shippedAt              DateTime?
  deliveredAt            DateTime?
  cancelledAt            DateTime?
  customsDeclaration     CustomsDeclaration?
  fraudChecks            FraudCheck[]
  inventory_reservations inventory_reservations[]
  history                OrderHistory[]
  items                  OrderItem[]
  pickupLocation         PickupLocation?          @relation(fields: [pickupLocationId], references: [id])
  shippingAddress        Address?                 @relation(fields: [shippingAddressId], references: [id])
  user                   User                     @relation(fields: [userId], references: [id])
  payment                Payment?
  refunds                Refund[]
  sellerOrders           SellerOrder[]
  shipment               Shipment?

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
  @@index([paymentStatus])
  @@map("orders")
  @@schema("public")
}

model SellerOrder {
  id             String      @id @default(cuid())
  orderId        String
  sellerId       String
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  subtotal       Decimal     @db.Decimal(10, 2)
  commission     Decimal     @db.Decimal(10, 2)
  sellerEarnings Decimal     @db.Decimal(10, 2)
  items          OrderItem[]
  order          Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  seller         Seller      @relation(fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([sellerId])
  @@index([status])
  @@map("seller_orders")
  @@schema("public")
}

model OrderItem {
  id            String          @id @default(cuid())
  orderId       String
  sellerOrderId String?
  productId     String
  variantId     String?
  name          String
  sku           String
  price         Decimal         @db.Decimal(10, 2)
  quantity      Int
  subtotal      Decimal         @db.Decimal(10, 2)
  order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product         @relation(fields: [productId], references: [id])
  sellerOrder   SellerOrder?    @relation(fields: [sellerOrderId], references: [id])
  variant       ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([sellerOrderId])
  @@index([productId])
  @@map("order_items")
  @@schema("public")
}

model OrderHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  note      String?
  createdBy String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([createdAt])
  @@map("order_history")
  @@schema("public")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  amount          Decimal       @db.Decimal(10, 2)
  currency        Currency      @default(USD)
  transactionId   String?
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]
  paymentLogs     PaymentLog[]

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
  @@schema("public")
}

model Refund {
  id          String       @id @default(cuid())
  orderId     String
  paymentId   String
  amount      Decimal      @db.Decimal(10, 2)
  reason      RefundReason
  description String?
  status      String       @default("pending")
  processedAt DateTime?
  createdAt   DateTime     @default(now())
  order       Order        @relation(fields: [orderId], references: [id])
  payment     Payment      @relation(fields: [paymentId], references: [id])

  @@index([orderId])
  @@index([paymentId])
  @@index([status])
  @@map("refunds")
  @@schema("public")
}

model Shipment {
  id             String    @id @default(cuid())
  orderId        String    @unique
  carrier        String
  trackingNumber String?
  trackingUrl    String?
  status         String    @default("pending")
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          Order     @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([trackingNumber])
  @@map("shipments")
  @@schema("public")
}

model Review {
  id         String       @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  comment    String
  isVerified Boolean      @default(false)
  status     ReviewStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
  @@index([status])
  @@index([rating])
  @@map("reviews")
  @@schema("public")
}

model SellerReview {
  id        String       @id @default(cuid())
  sellerId  String
  userId    String
  orderId   String
  rating    Int
  comment   String?
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  seller    Seller       @relation(fields: [sellerId], references: [id])

  @@unique([sellerId, orderId])
  @@index([sellerId])
  @@index([status])
  @@map("seller_reviews")
  @@schema("public")
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  balance      Decimal             @default(0) @db.Decimal(10, 2)
  currency     Currency            @default(USD)
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions WalletTransaction[]
  user         User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("wallets")
  @@schema("public")
}

model WalletTransaction {
  id            String                @id @default(cuid())
  walletId      String
  type          WalletTransactionType
  amount        Decimal               @db.Decimal(10, 2)
  balance       Decimal               @db.Decimal(10, 2)
  description   String
  referenceType String?
  referenceId   String?
  createdAt     DateTime              @default(now())
  wallet        Wallet                @relation(fields: [walletId], references: [id])

  @@index([walletId])
  @@index([type])
  @@index([createdAt])
  @@map("wallet_transactions")
  @@schema("public")
}

model GiftCard {
  id             String         @id @default(cuid())
  code           String         @unique
  initialAmount  Decimal        @db.Decimal(10, 2)
  currentBalance Decimal        @db.Decimal(10, 2)
  currency       Currency       @default(USD)
  status         GiftCardStatus @default(ACTIVE)
  expiresAt      DateTime
  createdAt      DateTime       @default(now())
  redeemedAt     DateTime?
  purchasedBy    String?
  redeemedBy     String?

  @@index([code])
  @@index([status])
  @@map("gift_cards")
  @@schema("public")
}

model Coupon {
  id              String        @id @default(cuid())
  code            String        @unique
  description     String?
  type            PromotionType
  value           Decimal       @db.Decimal(10, 2)
  minimumPurchase Decimal?      @db.Decimal(10, 2)
  usageLimit      Int?
  usageCount      Int           @default(0)
  userLimit       Int?
  status          CouponStatus  @default(ACTIVE)
  validFrom       DateTime
  validTo         DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  productIds      String[]
  categoryIds     String[]
  sellerIds       String[]
  uses            CouponUse[]

  @@index([code])
  @@index([status])
  @@index([validFrom, validTo])
  @@map("coupons")
  @@schema("public")
}

model CouponUse {
  id       String   @id @default(cuid())
  couponId String
  userId   String
  orderId  String
  discount Decimal  @db.Decimal(10, 2)
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id])

  @@unique([couponId, orderId])
  @@index([couponId])
  @@index([userId])
  @@map("coupon_uses")
  @@schema("public")
}

model Promotion {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        PromotionType
  value       Decimal       @db.Decimal(10, 2)
  conditions  Json
  priority    Int           @default(0)
  isActive    Boolean       @default(true)
  validFrom   DateTime
  validTo     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([isActive])
  @@index([validFrom, validTo])
  @@map("promotions")
  @@schema("public")
}

model TaxRule {
  id        String   @id @default(cuid())
  country   String
  state     String?
  city      String?
  zipCode   String?
  taxType   TaxType
  rate      Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, state])
  @@index([isActive])
  @@map("tax_rules")
  @@schema("public")
}

model ShippingClass {
  id          String   @id @default(cuid())
  name        String
  description String?
  baseRate    Decimal  @db.Decimal(10, 2)
  perKgRate   Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("shipping_classes")
  @@schema("public")
}

model ShippingZone {
  id        String               @id @default(cuid())
  name      String
  countries String[]
  states    String[]
  zipCodes  String[]
  isActive  Boolean              @default(true)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  methods   ShippingZoneMethod[]

  @@index([isActive])
  @@map("shipping_zones")
  @@schema("public")
}

model ShippingZoneMethod {
  id            String         @id @default(cuid())
  zoneId        String
  method        ShippingMethod
  name          String
  rate          Decimal        @db.Decimal(10, 2)
  estimatedDays Int
  isActive      Boolean        @default(true)
  zone          ShippingZone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId])
  @@index([isActive])
  @@map("shipping_zone_methods")
  @@schema("public")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
  @@schema("public")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  body      String
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([isActive])
  @@map("email_templates")
  @@schema("public")
}

model SmsTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  message   String
  variables String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([isActive])
  @@map("sms_templates")
  @@schema("public")
}

model SupportTicket {
  id        String          @id @default(cuid())
  userId    String
  subject   String
  status    TicketStatus    @default(OPEN)
  priority  TicketPriority  @default(MEDIUM)
  category  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  closedAt  DateTime?
  user      User            @relation(fields: [userId], references: [id])
  messages  TicketMessage[]

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@map("support_tickets")
  @@schema("public")
}

model TicketMessage {
  id         String        @id @default(cuid())
  ticketId   String
  senderId   String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@map("ticket_messages")
  @@schema("public")
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("faqs")
  @@schema("public")
}

model Content {
  id        String      @id @default(cuid())
  type      ContentType
  title     String
  content   String
  imageUrl  String?
  linkUrl   String?
  position  String?
  isActive  Boolean     @default(true)
  validFrom DateTime?
  validTo   DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([position])
  @@map("contents")
  @@schema("public")
}

model NewsletterSubscriber {
  id           String   @id @default(cuid())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())

  @@index([email])
  @@index([isActive])
  @@map("newsletter_subscribers")
  @@schema("public")
}

model Membership {
  id              String         @id @default(cuid())
  userId          String         @unique
  tier            MembershipTier @default(BASIC)
  startDate       DateTime       @default(now())
  endDate         DateTime?
  isActive        Boolean        @default(true)
  autoRenew       Boolean        @default(true)
  freeShipping    Boolean        @default(false)
  discountRate    Float          @default(0)
  prioritySupport Boolean        @default(false)
  user            User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tier])
  @@index([isActive])
  @@map("memberships")
  @@schema("public")
}

model LoyaltyPoints {
  id           String    @id @default(cuid())
  userId       String    @unique
  points       Int
  totalEarned  Int       @default(0)
  totalSpent   Int       @default(0)
  tier         String    @default("BRONZE")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  transactions LoyaltyTransaction[]

  @@map("loyalty_points")
  @@schema("public")
}

model LoyaltyTransaction {
  id              String        @id @default(cuid())
  loyaltyPointsId String
  type            String
  points          Int
  description     String
  orderId         String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  expiresAt       DateTime?
  loyaltyPoints   LoyaltyPoints @relation(fields: [loyaltyPointsId], references: [id])

  @@map("loyalty_transactions")
  @@schema("public")
}

model FraudRule {
  id          String   @id @default(cuid())
  name        String
  description String
  isActive    Boolean  @default(true)
  weight      Float
  conditions  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("fraud_rules")
  @@schema("public")
}

model FraudCheck {
  id        String           @id @default(cuid())
  orderId   String
  ruleName  String
  result    FraudCheckResult
  score     Float
  details   Json?
  checkedAt DateTime         @default(now())
  order     Order            @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([result])
  @@map("fraud_checks")
  @@schema("public")
}

model BlockedIp {
  id        String    @id @default(cuid())
  ipAddress String    @unique
  reason    String
  blockedAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([ipAddress])
  @@index([expiresAt])
  @@map("blocked_ips")
  @@schema("public")
}

model BlockedEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  reason    String
  blockedAt DateTime @default(now())

  @@index([email])
  @@map("blocked_emails")
  @@schema("public")
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  permissions String[]
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?

  @@index([key])
  @@index([isActive])
  @@map("api_keys")
  @@schema("public")
}

model Webhook {
  id        String       @id @default(cuid())
  url       String
  events    String[]
  secret    String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  logs      WebhookLog[]

  @@index([isActive])
  @@map("webhooks")
  @@schema("public")
}

model WebhookLog {
  id         String   @id @default(cuid())
  webhookId  String
  event      String
  payload    Json
  response   Json?
  statusCode Int?
  success    Boolean
  attemptAt  DateTime @default(now())
  webhook    Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([success])
  @@map("webhook_logs")
  @@schema("public")
}

model UserConsent {
  id                 String    @id @default(cuid())
  userId             String    @unique
  marketingEmails    Boolean   @default(false)
  marketingSms       Boolean   @default(false)
  dataProcessing     Boolean   @default(true)
  termsAcceptedAt    DateTime
  privacyAcceptedAt  DateTime
  marketingConsentAt DateTime?
  user               User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_consents")
  @@schema("public")
}

model AccountDeletion {
  id           String    @id @default(cuid())
  userId       String
  reason       String?
  feedback     String?
  requestedAt  DateTime  @default(now())
  scheduledFor DateTime
  processedAt  DateTime?

  @@index([scheduledFor])
  @@index([processedAt])
  @@map("account_deletions")
  @@schema("public")
}

model DataExport {
  id          String    @id @default(cuid())
  userId      String
  status      String    @default("pending")
  fileUrl     String?
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  expiresAt   DateTime?

  @@index([userId])
  @@index([status])
  @@map("data_exports")
  @@schema("public")
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  oldPrice  Decimal  @db.Decimal(10, 2)
  newPrice  Decimal  @db.Decimal(10, 2)
  changedBy String
  changedAt DateTime @default(now())

  @@index([productId])
  @@index([changedAt])
  @@map("price_history")
  @@schema("public")
}

model CartAbandonment {
  id           String    @id @default(cuid())
  userId       String
  cartValue    Decimal   @db.Decimal(10, 2)
  items        Json
  abandonedAt  DateTime
  recoveredAt  DateTime?
  reminderSent Boolean   @default(false)

  @@index([userId])
  @@index([abandonedAt])
  @@map("cart_abandonments")
  @@schema("public")
}

model ProductView {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  ipAddress String
  viewedAt  DateTime @default(now())

  @@index([productId])
  @@index([userId])
  @@index([viewedAt])
  @@map("product_views")
  @@schema("public")
}

model SellerAnalytics {
  id             String   @id @default(cuid())
  sellerId       String
  date           DateTime
  revenue        Decimal  @db.Decimal(10, 2)
  orders         Int
  products       Int
  views          Int
  conversionRate Float
  seller         Seller   @relation(fields: [sellerId], references: [id])

  @@unique([sellerId, date])
  @@index([sellerId])
  @@index([date])
  @@map("seller_analytics")
  @@schema("public")
}

model PlatformAnalytics {
  id            String   @id @default(cuid())
  date          DateTime @unique
  totalRevenue  Decimal  @db.Decimal(10, 2)
  totalOrders   Int
  newUsers      Int
  activeUsers   Int
  activeSellers Int
  newProducts   Int

  @@index([date])
  @@map("platform_analytics")
  @@schema("public")
}

model Payout {
  id          String    @id @default(cuid())
  sellerId    String
  amount      Decimal   @db.Decimal(10, 2)
  currency    Currency  @default(USD)
  method      String
  status      String    @default("pending")
  reference   String?
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  seller      Seller    @relation(fields: [sellerId], references: [id])

  @@index([sellerId])
  @@index([status])
  @@map("payouts")
  @@schema("public")
}

model Commission {
  id        String    @id @default(cuid())
  orderId   String
  sellerId  String
  rate      Float
  amount    Decimal   @db.Decimal(10, 2)
  status    String    @default("pending")
  paidAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([sellerId])
  @@index([status])
  @@map("commissions")
  @@schema("public")
}

model ReturnRequest {
  id          String       @id @default(cuid())
  orderId     String
  userId      String
  reason      RefundReason
  description String?
  status      String       @default("pending")
  images      String[]
  createdAt   DateTime     @default(now())
  approvedAt  DateTime?
  completedAt DateTime?

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@map("return_requests")
  @@schema("public")
}

model ProductQuestion {
  id         String    @id @default(cuid())
  productId  String
  userId     String
  question   String
  answer     String?
  answeredBy String?
  answeredAt DateTime?
  isPublic   Boolean   @default(true)
  createdAt  DateTime  @default(now())

  @@index([productId])
  @@index([userId])
  @@map("product_questions")
  @@schema("public")
}

model SellerBadge {
  id          String                  @id @default(cuid())
  name        String
  description String
  imageUrl    String
  criteria    Json
  createdAt   DateTime                @default(now())
  sellers     SellerBadgeAssignment[]

  @@map("seller_badges")
  @@schema("public")
}

model SellerBadgeAssignment {
  id       String      @id @default(cuid())
  sellerId String
  badgeId  String
  earnedAt DateTime    @default(now())
  badge    SellerBadge @relation(fields: [badgeId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])

  @@unique([sellerId, badgeId])
  @@index([sellerId])
  @@map("seller_badge_assignments")
  @@schema("public")
}

model ProductBundle {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Decimal      @db.Decimal(10, 2)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  items       BundleItem[]

  @@index([isActive])
  @@map("product_bundles")
  @@schema("public")
}

model BundleItem {
  id        String        @id @default(cuid())
  bundleId  String
  productId String
  quantity  Int
  bundle    ProductBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId])
  @@map("bundle_items")
  @@schema("public")
}

model FlashSale {
  id          String          @id @default(cuid())
  name        String
  description String?
  startsAt    DateTime
  endsAt      DateTime
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  items       FlashSaleItem[]

  @@index([isActive])
  @@index([startsAt, endsAt])
  @@map("flash_sales")
  @@schema("public")
}

model FlashSaleItem {
  id          String    @id @default(cuid())
  flashSaleId String
  productId   String
  discount    Float
  quantity    Int
  sold        Int       @default(0)
  flashSale   FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)

  @@index([flashSaleId])
  @@index([productId])
  @@map("flash_sale_items")
  @@schema("public")
}

model ProductRecommendation {
  id        String   @id @default(cuid())
  userId    String
  productId String
  score     Float
  reason    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
  @@map("product_recommendations")
  @@schema("public")
}

model AbTest {
  id          String             @id @default(cuid())
  name        String
  description String?
  variants    Json
  isActive    Boolean            @default(true)
  startsAt    DateTime
  endsAt      DateTime?
  createdAt   DateTime           @default(now())
  assignments AbTestAssignment[]

  @@index([isActive])
  @@map("ab_tests")
  @@schema("public")
}

model AbTestAssignment {
  id         String   @id @default(cuid())
  testId     String
  userId     String
  variant    String
  assignedAt DateTime @default(now())
  test       AbTest   @relation(fields: [testId], references: [id])

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
  @@map("ab_test_assignments")
  @@schema("public")
}

model CurrencyExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate         Float
  updatedAt    DateTime @default(now())

  @@unique([fromCurrency, toCurrency])
  @@index([fromCurrency, toCurrency])
  @@map("currency_exchange_rates")
  @@schema("public")
}

model Geolocation {
  id        String   @id @default(cuid())
  ipAddress String   @unique
  country   String
  region    String?
  city      String?
  latitude  Float?
  longitude Float?
  timezone  String?
  updatedAt DateTime @default(now())

  @@index([ipAddress])
  @@index([country])
  @@map("geolocations")
  @@schema("public")
}

model ProductImport {
  id            String    @id @default(cuid())
  sellerId      String
  fileName      String
  fileUrl       String
  status        String    @default("pending")
  totalRows     Int
  processedRows Int       @default(0)
  successRows   Int       @default(0)
  errorRows     Int       @default(0)
  errors        Json?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  @@index([sellerId])
  @@index([status])
  @@map("product_imports")
  @@schema("public")
}

model SeoMetadata {
  id            String   @id @default(cuid())
  entityType    String
  entityId      String
  title         String?
  description   String?
  keywords      String[]
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  canonicalUrl  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([entityType, entityId])
  @@index([entityType, entityId])
  @@map("seo_metadata")
  @@schema("public")
}

model Redirect {
  id        String   @id @default(cuid())
  fromPath  String   @unique
  toPath    String
  type      Int      @default(301)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([fromPath])
  @@index([isActive])
  @@map("redirects")
  @@schema("public")
}

model Menu {
  id        String     @id @default(cuid())
  name      String
  location  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MenuItem[]

  @@index([location])
  @@index([isActive])
  @@map("menus")
  @@schema("public")
}

model MenuItem {
  id       String     @id @default(cuid())
  menuId   String
  parentId String?
  title    String
  url      String?
  target   String     @default("_self")
  icon     String?
  position Int        @default(0)
  isActive Boolean    @default(true)
  menu     Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent   MenuItem?  @relation("MenuItemHierarchy", fields: [parentId], references: [id])
  children MenuItem[] @relation("MenuItemHierarchy")

  @@index([menuId])
  @@index([parentId])
  @@map("menu_items")
  @@schema("public")
}

model StoreSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  type      String
  updatedAt DateTime @default(now())

  @@index([key])
  @@map("store_settings")
  @@schema("public")
}

model Language {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  nativeName   String
  isActive     Boolean       @default(true)
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  translations Translation[]

  @@index([code])
  @@index([isActive])
  @@map("languages")
  @@schema("public")
}

model Translation {
  id         String   @id @default(cuid())
  languageId String
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   Language @relation(fields: [languageId], references: [id])

  @@unique([languageId, key])
  @@index([languageId])
  @@index([key])
  @@map("translations")
  @@schema("public")
}

model FileUpload {
  id         String   @id @default(cuid())
  fileName   String
  fileSize   Int
  mimeType   String
  url        String
  uploadedBy String
  createdAt  DateTime @default(now())

  @@index([uploadedBy])
  @@index([createdAt])
  @@map("file_uploads")
  @@schema("public")
}

model Backup {
  id          String    @id @default(cuid())
  type        String
  status      String    @default("running")
  fileUrl     String?
  fileSize    Int?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  error       String?

  @@index([type])
  @@index([status])
  @@index([startedAt])
  @@map("backups")
  @@schema("public")
}

model SystemHealth {
  id           String   @id @default(cuid())
  service      String
  status       String
  responseTime Int?
  error        String?
  checkedAt    DateTime @default(now())

  @@index([service])
  @@index([status])
  @@index([checkedAt])
  @@map("system_health")
  @@schema("public")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)
  rules       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([isEnabled])
  @@map("feature_flags")
  @@schema("public")
}

model JobQueue {
  id           String    @id @default(cuid())
  name         String
  payload      Json
  status       String    @default("pending")
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  error        String?
  scheduledFor DateTime?
  processedAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([status])
  @@index([scheduledFor])
  @@map("job_queue")
  @@schema("public")
}

model Report {
  id          String    @id @default(cuid())
  type        String
  name        String
  parameters  Json
  format      String
  status      String    @default("pending")
  fileUrl     String?
  requestedBy String
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([type])
  @@index([status])
  @@index([requestedBy])
  @@map("reports")
  @@schema("public")
}

model DashboardWidget {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  config    Json
  position  Json
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("dashboard_widgets")
  @@schema("public")
}

model NotificationPreference {
  id             String           @id @default(cuid())
  userId         String
  channel        NotificationType
  orderUpdates   Boolean          @default(true)
  promotions     Boolean          @default(true)
  newsletter     Boolean          @default(true)
  securityAlerts Boolean          @default(true)
  productUpdates Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, channel])
  @@index([userId])
  @@map("notification_preferences")
  @@schema("public")
}

model SocialMediaLink {
  id        String   @id @default(cuid())
  platform  String
  url       String
  icon      String?
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([isActive])
  @@map("social_media_links")
  @@schema("public")
}

model Page {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([slug])
  @@index([isPublished])
  @@map("pages")
  @@schema("public")
}

model BlogPost {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  featuredImage String?
  author        String
  categoryId    String
  tags          String[]
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  viewCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@index([isPublished])
  @@map("blog_posts")
  @@schema("public")
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())

  @@index([slug])
  @@map("blog_categories")
  @@schema("public")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  company   String?
  content   String
  rating    Int
  imageUrl  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([isActive])
  @@map("testimonials")
  @@schema("public")
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String
  websiteUrl  String?
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@index([isActive])
  @@map("partners")
  @@schema("public")
}

model StoreLocation {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  zipCode   String
  country   String
  phone     String
  email     String?
  latitude  Float?
  longitude Float?
  hours     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([isActive])
  @@map("store_locations")
  @@schema("public")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String
  imageUrl        String?
  startsAt        DateTime
  endsAt          DateTime
  location        String?
  isOnline        Boolean  @default(false)
  registrationUrl String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())

  @@index([isActive])
  @@index([startsAt, endsAt])
  @@map("events")
  @@schema("public")
}

model Survey {
  id          String           @id @default(cuid())
  title       String
  description String?
  questions   Json
  isActive    Boolean          @default(true)
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime         @default(now())
  responses   SurveyResponse[]

  @@index([isActive])
  @@map("surveys")
  @@schema("public")
}

model SurveyResponse {
  id          String   @id @default(cuid())
  surveyId    String
  userId      String?
  answers     Json
  completedAt DateTime @default(now())
  survey      Survey   @relation(fields: [surveyId], references: [id])

  @@index([surveyId])
  @@index([userId])
  @@map("survey_responses")
  @@schema("public")
}

model Referral {
  id            String    @id @default(cuid())
  referrerId    String
  referredEmail String
  status        String    @default("pending")
  rewardAmount  Decimal?  @db.Decimal(10, 2)
  registeredAt  DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  @@index([referrerId])
  @@index([status])
  @@map("referrals")
  @@schema("public")
}

model ProductAlert {
  id        String   @id @default(cuid())
  userId    String
  productId String
  type      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, productId, type])
  @@index([productId])
  @@index([isActive])
  @@map("product_alerts")
  @@schema("public")
}

model ComparisonList {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@map("comparison_lists")
  @@schema("public")
}

model QuickOrder {
  id          String   @id @default(cuid())
  userId      String
  items       Json
  totalAmount Decimal  @db.Decimal(10, 2)
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("quick_orders")
  @@schema("public")
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String
  productId    String
  frequency    String
  quantity     Int
  nextDelivery DateTime
  status       String    @default("active")
  pausedUntil  DateTime?
  cancelledAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([userId])
  @@index([status])
  @@index([nextDelivery])
  @@map("subscriptions")
  @@schema("public")
}

model StoreCredit {
  id         String    @id @default(cuid())
  userId     String
  amount     Decimal   @db.Decimal(10, 2)
  reason     String
  orderId    String?
  expiresAt  DateTime?
  usedAmount Decimal   @default(0) @db.Decimal(10, 2)
  createdAt  DateTime  @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@map("store_credits")
  @@schema("public")
}

model Vendor {
  id          String   @id @default(cuid())
  name        String
  contactName String
  email       String
  phone       String?
  address     String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("vendors")
  @@schema("public")
}

model PurchaseOrder {
  id           String    @id @default(cuid())
  vendorId     String
  orderNumber  String    @unique
  status       String    @default("draft")
  totalAmount  Decimal   @db.Decimal(10, 2)
  expectedDate DateTime?
  receivedDate DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([vendorId])
  @@index([status])
  @@map("purchase_orders")
  @@schema("public")
}

model StockTransfer {
  id             String    @id @default(cuid())
  fromLocationId String
  toLocationId   String
  status         String    @default("pending")
  items          Json
  transferredBy  String
  transferredAt  DateTime?
  createdAt      DateTime  @default(now())

  @@index([status])
  @@map("stock_transfers")
  @@schema("public")
}

model ProductCollection {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  description String?
  imageUrl    String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  items       ProductCollectionItem[]

  @@index([slug])
  @@index([isActive])
  @@map("product_collections")
  @@schema("public")
}

model ProductCollectionItem {
  id           String            @id @default(cuid())
  collectionId String
  productId    String
  position     Int               @default(0)
  collection   ProductCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([collectionId])
  @@map("product_collection_items")
  @@schema("public")
}

model UserSearchPreference {
  id        String   @id @default(cuid())
  userId    String
  productId String
  score     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@map("user_search_preferences")
  @@schema("public")
}

model Message {
  id             String   @id @default(cuid())
  senderId       String
  receiverId     String
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  receiver       User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User     @relation("SentMessages", fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  attachments    Json?

  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
  @@schema("public")
}

model CustomsDeclaration {
  id                String        @id @default(cuid())
  orderId           String        @unique
  description       String
  value             Decimal       @db.Decimal(10, 2)
  currency          Currency
  createdAt         DateTime      @default(now())
  order             Order         @relation(fields: [orderId], references: [id])
  items             CustomsItem[]
  status            CustomsStatus @default(PENDING)
  declarationNumber String?
  countryFrom       String?
  countryTo         String?
  customsDuty       Decimal?      @db.Decimal(10, 2)
  vat               Decimal?      @db.Decimal(10, 2)
  handlingFee       Decimal?      @db.Decimal(10, 2)

  @@index([orderId])
  @@map("customs_declarations")
  @@schema("public")
}

model CustomsItem {
  id             String             @id @default(cuid())
  declarationId  String
  productId      String
  description    String
  quantity       Int
  value          Decimal            @db.Decimal(10, 2)
  originCountry  String
  declaration    CustomsDeclaration @relation(fields: [declarationId], references: [id])
  product        Product            @relation(fields: [productId], references: [id])

  @@index([declarationId])
  @@map("customs_items")
  @@schema("public")
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  meta      Json
  timestamp DateTime @default(now())

  @@index([level])
  @@index([timestamp])
  @@map("logs")
  @@schema("public")
}

model ApiRequestLog {
  id         String   @id @default(cuid())
  apiKey     String?
  ipAddress  String
  method     String
  path       String
  statusCode Int
  responseTime Int
  createdAt  DateTime @default(now())

  @@index([apiKey])
  @@index([createdAt])
  @@map("api_request_logs")
  @@schema("public")
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String
  activity  String
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("user_activity_logs")
  @@schema("public")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entity     String
  entityId   String
  before     Json?
  after      Json?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@map("audit_logs")
  @@schema("audit")
}

model buy_box_configs {
  id          String   @id @default(cuid())
  category_id String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  category    Category @relation(fields: [category_id], references: [id])

  @@map("buy_box_configs")
  @@schema("public")
}

model duplicate_groups {
  id         String               @id @default(cuid())
  product_id String               @unique
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  product    Product              @relation(fields: [product_id], references: [id])
  products   duplicate_products[]

  @@map("duplicate_groups")
  @@schema("public")
}

model duplicate_products {
  id                String           @id @default(cuid())
  product_id        String           @unique
  duplicate_group_id String
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  duplicate_group   duplicate_groups @relation(fields: [duplicate_group_id], references: [id])
  product           Product          @relation(fields: [product_id], references: [id])

  @@map("duplicate_products")
  @@schema("public")
}

model inventory_items {
  id          String                @id @default(cuid())
  product_id  String
  location_id String
  quantity    Int
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  product     Product               @relation(fields: [product_id], references: [id])
  location    stock_locations       @relation(fields: [location_id], references: [id])
  movements   inventory_movements[]

  @@map("inventory_items")
  @@schema("public")
}

model inventory_movements {
  id              String          @id @default(cuid())
  product_id      String
  inventory_item_id String
  quantity        Int
  type            String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  product         Product         @relation(fields: [product_id], references: [id])
  inventory_item  inventory_items @relation(fields: [inventory_item_id], references: [id])

  @@map("inventory_movements")
  @@schema("public")
}

model inventory_reservations {
  id         String   @id @default(cuid())
  product_id String
  order_id   String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  order      Order    @relation(fields: [order_id], references: [id])

  @@map("inventory_reservations")
  @@schema("public")
}

model low_stock_alerts {
  id         String   @id @default(cuid())
  product_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])

  @@map("low_stock_alerts")
  @@schema("public")
}

model seller_offers {
  id         String   @id @default(cuid())
  product_id String
  seller_id  String
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  seller     Seller   @relation(fields: [seller_id], references: [id])

  @@map("seller_offers")
  @@schema("public")
}

model stock_locations {
  id              String            @id @default(cuid())
  seller_id       String
  name            String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  seller          Seller            @relation(fields: [seller_id], references: [id])
  inventory_items inventory_items[]

  @@map("stock_locations")
  @@schema("public")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String
  userId    String?
  productId String?
  sellerId  String?
  data      Json
  createdAt DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([productId])
  @@index([sellerId])
  @@map("analytics_events")
  @@schema("public")
}

model ProductAnalytics {
  id             String   @id @default(cuid())
  productId      String
  date           DateTime
  views          Int
  orders         Int
  revenue        Decimal  @db.Decimal(10, 2)
  conversionRate Float
  product        Product  @relation(fields: [productId], references: [id])

  @@unique([productId, date])
  @@index([productId])
  @@index([date])
  @@map("product_analytics")
  @@schema("public")
}

model AbandonedBrowse {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())

  @@index([userId])
  @@map("abandoned_browses")
  @@schema("public")
}

model AbandonedCheckout {
  id          String   @id @default(cuid())
  userId      String
  cart        Json
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("abandoned_checkouts")
  @@schema("public")
}

model AffiliateClick {
  id          String    @id @default(cuid())
  affiliateId String
  ipAddress   String
  userAgent   String
  createdAt   DateTime  @default(now())
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  @@index([affiliateId])
  @@map("affiliate_clicks")
  @@schema("public")
}

model Affiliate {
  id     String           @id @default(cuid())
  userId String           @unique
  code   String           @unique
  user   User             @relation(fields: [userId], references: [id])
  clicks AffiliateClick[]

  @@map("affiliates")
  @@schema("public")
}

model AppInstallation {
  id        String   @id @default(cuid())
  appId     String
  shop      String
  token     String
  createdAt DateTime @default(now())

  @@map("app_installations")
  @@schema("public")
}

model BannedItem {
  id        String   @id @default(cuid())
  name      String
  reason    String
  createdAt DateTime @default(now())

  @@map("banned_items")
  @@schema("public")
}

model CollectionProduct {
  id           String   @id @default(cuid())
  collectionId String
  productId    String
  product      Product  @relation(fields: [productId], references: [id])

  @@map("collection_products")
  @@schema("public")
}

model Conversation {
  id           String    @id @default(cuid())
  type         ConversationType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]

  @@map("conversations")
  @@schema("public")
}

model CustomerGroupMember {
  id              String        @id @default(cuid())
  customerGroupId String
  userId          String
  customerGroup   CustomerGroup @relation(fields: [customerGroupId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("customer_group_members")
  @@schema("public")
}

model CustomerGroup {
  id      String                @id @default(cuid())
  name    String
  members CustomerGroupMember[]

  @@map("customer_groups")
  @@schema("public")
}

model FraudAlert {
  id        String   @id @default(cuid())
  orderId   String
  reason    String
  createdAt DateTime @default(now())

  @@map("fraud_alerts")
  @@schema("public")
}

model InventoryLog {
  id        String   @id @default(cuid())
  productId String
  change    Int
  reason    String
  createdAt DateTime @default(now())

  @@map("inventory_logs")
  @@schema("public")
}

model LiveStream {
  id        String   @id @default(cuid())
  title     String
  url       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("live_streams")
  @@schema("public")
}

model MarketingCampaign {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  budget    Decimal  @db.Decimal(10, 2)

  @@map("marketing_campaigns")
  @@schema("public")
}

model PaymentLog {
  id        String   @id @default(cuid())
  paymentId String
  message   String
  createdAt DateTime @default(now())
  payment   Payment  @relation(fields: [paymentId], references: [id])

  @@map("payment_logs")
  @@schema("public")
}

model PriceRule {
  id        String  @id @default(cuid())
  name      String
  value     Decimal @db.Decimal(10, 2)
  isActive  Boolean @default(true)

  @@map("price_rules")
  @@schema("public")
}

model ScriptTag {
  id        String   @id @default(cuid())
  src       String
  displayScope String
  createdAt DateTime @default(now())

  @@map("script_tags")
  @@schema("public")
}

model SearchLog {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  results   Int
  createdAt DateTime @default(now())

  @@map("search_logs")
  @@schema("public")
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  ipAddress String
  createdAt DateTime @default(now())

  @@map("security_logs")
  @@schema("public")
}

model Theme {
  id        String  @id @default(cuid())
  name      String
  settings  Json
  isActive  Boolean @default(true)

  @@map("themes")
  @@schema("public")
}

enum Role {
  USER
  SELLER
  ADMIN
  SUPER_ADMIN

  @@schema("public")
}

enum TwoFactorMethod {
  EMAIL
  SMS
  APP

  @@schema("public")
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED

  @@schema("public")
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@schema("public")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED

  @@schema("public")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED

  @@schema("public")
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  WALLET
  BANK_TRANSFER

  @@schema("public")
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP

  @@schema("public")
}

enum RefundReason {
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  OTHER

  @@schema("public")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  REFUND
  ADJUSTMENT

  @@schema("public")
}

enum GiftCardStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  DEPLETED

  @@schema("public")
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED

  @@schema("public")
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING

  @@schema("public")
}

enum TaxType {
  VAT
  SALES_TAX

  @@schema("public")
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  NEWSLETTER
  SECURITY_ALERT
  PRODUCT_UPDATE

  @@schema("public")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED

  @@schema("public")
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@schema("public")
}

enum ContentType {
  BANNER
  SLIDER
  POPUP
  FOOTER_LINK

  @@schema("public")
}

enum MembershipTier {
  BASIC
  PREMIUM
  VIP

  @@schema("public")
}

enum FraudCheckResult {
  PASS
  FAIL
  REVIEW

  @@schema("public")
}

enum CategoryType {
  PRODUCT
  BLOG

  @@schema("public")
}

enum ProductType {
  STANDARD
  DIGITAL
  SERVICE
  BUNDLE

  @@schema("public")
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  CAD
  AUD
  CHF
  CNY
  INR
  BRL
  RUB
  KRW
  SGD
  HKD
  NZD
  MXN
  NOK
  SEK
  ZAR

  @@schema("public")
}

enum CustomsStatus {
  PENDING
  CLEARED
  REJECTED

  @@schema("public")
}

enum ConversationType {
  PRIVATE
  GROUP

  @@schema("public")
}

enum MessageType {
  TEXT
  IMAGE
  FILE

  @@schema("public")
}

enum MessageStatus {
  SENT
  DELIVERED
  READ

  @@schema("public")
}